<?xml version="1.0"?>

<project name="selenium-core-example" default="all" basedir=".">

    <property file="${basedir}/build.${env}.properties"/>

    <property name="utilities.java.classes" value="${basedir}/build/utilities-java-classes"/>
    <property name="selenium.output.dir" value="${basedir}/output/selenium"/>
    <property name="test.coverage.dir" value="${basedir}/output/tests-coverage"/>
    <property name="output.dir" value="${basedir}/output"/>
    <property name="build.compile.debug" value="true"/>
    <property name="build.compile.deprecation" value="true"/>
    <property name="src.main" value="src"/>
    <property name="src.web" value="webroot"/>
    <property name="src.test.java" value="test"/>
    <property name="src.test.web" value="functional-tests"/>
    <property name="src.test.web.development" value="functional-tests/tests/development"/>
    <property name="lib.dir" value="lib"/>
    <property name="lib.build" value="${lib.dir}/build"/>
    <property name="build.dir" value="build"/>
    <property name="build.web.dir" value="${build.dir}/web"/>
    <property name="test.dir" value="build/test"/>
    <property name="gen.test.web" value="${test.dir}/web"/>
    <property name="ruby.selenium.tests.dir" value="${test.dir}/web/ruby-selenium-tests"/>
    <property name="selenium.url" value="http://${server.name}:${server.port}/selenium"/>
    <property name="tomcat.home" value="${basedir}/apache-tomcat-6.0.24"/>

    <path id="utilities.compile.classpath">
        <pathelement location="${utilities.java.classes}"/>
        <fileset dir="vendor/selenium" includes="**/*.jar"/>
    </path>

    <path id="utilities.class.path">
        <pathelement location="${utilities.java.classes}"/>
        <fileset dir="vendor/selenium" includes="**/*.jar"/>
    </path>

    <path id="cobertura.classpath">
        <fileset dir="${lib.build}/cobertura-1.9">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties">
        <classpath>
            <fileset dir="${lib.build}/cobertura-1.9" includes="**/*.jar"/>
        </classpath>
    </taskdef>

    <target name="all"
            depends="check-tomcat-is-running, clean, init, build-all, run-unit-tests, clean-initialize-db,
            utilities-compile, generate-deploy-tests, run-functional-tests, create-coverage-report"
            description="Main target which builds everything and runs all tests"/>

    <target name="check-tomcat-is-running">
        <echo>Server port ${server.port}</echo>
        <waitfor maxwait="100" maxwaitunit="millisecond" timeoutproperty="tomcat.stopped">
            <http url="http://localhost:${server.port}/"/>
        </waitfor>

        <fail unless="tomcat.stopped">Tomcat is already running.</fail>
    </target>

    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${tomcat.home}/webapps/selenium"/>
        <delete dir="${tomcat.home}/webapps/selenium-tests"/>
        <delete dir="${tomcat.home}/work/Catalina/localhost"/>
        <delete dir="${output.dir}/dist"/>
        <delete dir="${output.dir}/selenium"/>
        <delete dir="${output.dir}/unit-tests"/>
    </target>

    <target name="init">
        <mkdir dir="${basedir}/output"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.web.dir}"/>
        <mkdir dir="${test.dir}"/>
        <mkdir dir="${gen.test.web}"/>
        <mkdir dir="${ruby.selenium.tests.dir}"/>
        <mkdir dir="${selenium.output.dir}"/>
        <mkdir dir="${utilities.java.classes}"/>
    </target>

    <target name="build-all" description="Build production classes and unit tests"/>

    <target name="run-unit-tests"/>

    <target name="clean-initialize-db" description="Clean database and initialize for the functional tests to run"/>

    <target name="utilities-compile">
        <compile classpathref="utilities.compile.classpath" src="${basedir}/vendor/utilities"
                 destDir="${utilities.java.classes}"/>
    </target>

    <target name="generate-deploy-tests" depends="init, generate-functional-tests"
            description="Build and deploy selenium tests">
        <copy todir="${tomcat.home}/webapps/selenium-tests">
            <fileset dir="${gen.test.web}" includes="**/*.html"/>
        </copy>
    </target>

    <target name="run-functional-tests" depends="start-tomcat,  run-selenium-tests, stop-tomcat"/>


    <!--I don't have src code right now. But I still felt this target needs would be of value to the devs. You have -->
    <!--to get instrumentation over your source code to be able to get a coverage report.-->

    <target name="create-coverage-report" depends="init" if="instrument">
        <!--<cobertura-report format="xml" datafile="cobertura.ser" destdir="${test.coverage.dir}" srcdir="${src.main}"/>-->
    </target>


    <!--The rest are worker targets called by the top level targets-->

    <target name="generate-functional-tests" depends="init">
        <generate-selenium-test-suite>
            <tests>
                <fileset dir="${src.test.web.development}"/>
            </tests>
        </generate-selenium-test-suite>
    </target>

    <target name="start-tomcat" depends="init">
        <parallel timeout="120000">
            <daemons>
                <tomcat-launcher/>
            </daemons>
        </parallel>
        <sleep seconds="5"/>
    </target>

    <target name="stop-tomcat">
        <tomcat-killer/>
    </target>

    <target name="run-selenium-tests">
        <delete file="${selenium.output.dir}/selenium-results.html"/>
        <java classname="com.prabindeka.selenium.runner.SeleniumRunner" fork="true" failonerror="true">
            <classpath refid="utilities.class.path"/>
            <sysproperty key="test.selenium.log.dir" value="${selenium.output.dir}"/>
            <sysproperty key="test.selenium.results" value="${selenium.url}/postResults"/>
            <sysproperty key="test.selenium.browser" value="firefox-chrome"/>
            <sysproperty key="test.firefox.exe.location" value="${firefox.exe.location}"/>
            <sysproperty key="test.selenium.runner"
                         value="${selenium.url}/TestRunner.html?test=/selenium-tests/TestSuite.html&amp;auto=true&amp;resultsUrl=${selenium.url}/postResults"/>
            <sysproperty key="test.selenium.browser.visible" value="true"/>
            <sysproperty key="test.selenium.maximum.poll.attempts" value="600"/>
            <sysproperty key="java.library.path" value="vendor/selenium"/>
        </java>

    </target>

    <macrodef name="generate-selenium-test-suite">
        <element name="tests"/>
        <sequential>
            <delete>
                <fileset dir="${ruby.selenium.tests.dir}" includes="*.test"/>
            </delete>
            <copy todir="${ruby.selenium.tests.dir}">
                <tests/>
            </copy>
            <exec dir="${src.test.web}" executable="ruby">
                <arg line="generate_all_tests.rb"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="tomcat-launcher">
        <sequential>
            <java jar="${basedir}/apache-tomcat-6.0.24/bin/bootstrap.jar" failonerror="true" fork="true">
                <sysproperty key="log4j.configuration" value="log4j.xml"/>
                <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser"/>
                <jvmarg value="-Dnet.sourceforge.cobertura.datafile=cobertura.ser"/>
                <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
                <jvmarg value="-Dcatalina.base=${tomcat.home}"/>
                <jvmarg value="-ea"/>
                <jvmarg value="-Xms256m"/>
                <jvmarg value="-Xmx512m"/>
            </java>
        </sequential>
    </macrodef>

    <macrodef name="tomcat-killer">
        <sequential>
            <echo message="Stopping Tomcat..."/>
            <java jar="${basedir}/apache-tomcat-6.0.24/bin/bootstrap.jar" failonerror="true" fork="true">
                <jvmarg value="-Dcatalina.home=${tomcat.home}"/>
                <arg line="stop"/>
            </java>

            <!--
                    Sleep for 10 seconds before running Cobertura report, to provide JVM time
                    to properly write data to the 'cobertura.ser' file
                -->
            <sleep seconds="5"/>
        </sequential>
    </macrodef>

    <macrodef name="compile">
        <attribute name="src"/>
        <attribute name="classpathref"/>
        <attribute name="destDir"/>
        <sequential>
            <javac srcdir="@{src}"
                   classpathref="@{classpathref}"
                   destdir="@{destDir}"
                   debug="${build.compile.debug}"
                   deprecation="${build.compile.deprecation}"
                   source="1.5"/>
        </sequential>
    </macrodef>

    <!--<target name="jar-selenium" description="creating the selenium core war after the hack">-->
    <!--<jar destfile="${basedir}/vendor/selenium/selenium.war">-->
    <!--<zipfileset dir="${basedir}/vendor/selenium/selenium-hack">-->
    <!--<include name="**/*"/>-->
    <!--</zipfileset>-->
    <!--</jar>-->
    <!--</target>-->

</project>

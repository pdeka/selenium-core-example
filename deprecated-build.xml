<?xml version="1.0" encoding="UTF-8"?>
<project name="All4Biz" basedir="." default="Build-And-TestAll">

	<property file="build.properties" />
	<property file="build-server.build.properties" />
	<!-- property file="template-build.properties" / -->

	<property name="selenium-server.port" value="7777"/>
	<property name="module.name" value="all4biz"/>

	<!-- Set version number environment variables This project will have #Hudson_Build_Number-Subversion_Build_Number in version string-->
	<property environment="env"/>
	<property name="Hudson.Build.Number" value="${env.BUILD_NUMBER}"/>
	<property name="Subversion.Build.Number" value="${env.SVN_REVISION}"/>
	
	<property name="src.dir" value="${basedir}/src" />
	<property name="junit.test.src.dir" value="${basedir}/junit" />
	<property name="functional.test.src.dir" value="${basedir}/selenium" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="build.test.dir" value="${build.dir}/test-build" />
	<property name="output.dir" value="${basedir}/output" />
	<property name="webroot.dir" value="${basedir}/WebRoot" />
	<property name="project.working.dir" value="${build.dir}/tmp/${module.name}" />
	<property name="project.working.test.dir" value="${build.test.dir}/tmp/${module.name}" />
	<property name="dist.dir" value="${basedir}/dist/" />
	<property name="dist.test.dir" value="${basedir}/dist/test/" />
	<property name="server.deploy.dir" value="${basedir}/dist/" />
	<property name="server.deploy.test.dir" value="${dist.test.dir}" />
	<property name="emma.classes.for.instr.dir" value="${build.test.dir}/classes-for-instr" />
	
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="lib.compile.dir" value="${basedir}/lib/compile" />
	<property name="lib.test.dir" value="${basedir}/lib/test" />
	<property name="lib.weblogic.dir" value="${lib.dir}/weblogic/" />
	<property name="lib.selenium.server.jar" value="${lib.dir}/selenium/selenium-server.jar" />

	<property name="output.reports.dir" value="${output.dir}/reports"/>
	<property name="output.reports.functional.dir" value="${output.reports.dir}/functional"/>
	<property name="output.reports.junit.dir" value="${output.reports.dir}/junits"/>

	<property name="output.reports.codecoverage.dir" value="${output.reports.dir}/codecoverage" />
	<property name="output.reports.codecoverage.instr.dir" value="${output.reports.dir}/emmainstr"/>
	
	<path id="emma.lib" >
	    <pathelement location="${lib.test.dir}/emma.jar" />
	    <pathelement location="${lib.test.dir}/emma_ant.jar" />
	  </path>
	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
	
	<path id="classpath.src">
		<pathelement location="${build.dir}/classes" />
		<fileset dir="${lib.dir}/compile">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${webroot.dir}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="classpath.test">
		<pathelement location="${build.test.dir}/classes" />
		<fileset dir="${lib.compile.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib.test.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${webroot.dir}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>
	<path id="emma.classpath.src">
		<pathelement location="${build.test.dir}/classes" />
		<pathelement location="${output.reports.codecoverage.instr.dir}" />
		<fileset dir="${lib.compile.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${lib.test.dir}">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${webroot.dir}/WEB-INF/lib">
			<include name="*.jar" />
		</fileset>
	</path>

	
	<target name="get-todays-date">
		<tstamp>
			<format property="todaysDate" pattern="yyyyMMdd" />
		</tstamp>
		<echo message="today's date is: ">${todaysDate}</echo>
	</target>

	<target name="increment-build-number" depends="get-todays-date">
		<property name="next.build.number" value="${All4Biz.major.version.number}" />
		<propertyfile file="build-version.properties">
			<entry key="All4Biz.current.build.number" default="10" type="int" operation="+" value="1" />
		</propertyfile>
		<property file="build-version.properties" />
		<echo message="All4Biz build number incremented to: ">${All4Biz.current.build.number}</echo>
	</target>

	<target name="update-version-label" depends="get-todays-date">
		<property file="build-version.properties" />
		
		<property name="version.label" value="Version ${All4Biz.major.version.number} Build #${Hudson.Build.Number}-${Subversion.Build.Number}${build.type} ${todaysDate}" />
		<echo message="All4Biz build number updated to: ">${version.label}</echo>

		<echo message="Updating border-template.htm Page With ${version.label}" />
		<delete file="${project.working.dir}/border-template.htm" />
		<copy todir="${project.working.dir}/" encoding="UTF-8">
			<fileset file="${webroot.dir}/border-template.htm" />
			<filterset begintoken="%!" endtoken="!%">
				<filter token="All4BizBuildNumber" value="${version.label}" />
			</filterset>
		</copy>
	</target>
	<target name="test-update-version-label" depends="get-todays-date">

		<property name="version.label" value="Version ${All4Biz.major.version.number} Build Build #${Hudson.Build.Number}-${Subversion.Build.Number}${build.type} ${todaysDate}" />
		<echo message="All4Biz build number updated to: ">${version.label}</echo>
		<echo message="Updating INSTR border-template.htm Page With ${version.label}" />
		<delete file="${project.working.test.dir}/border-template.htm" />
		<copy todir="${project.working.test.dir}/" encoding="UTF-8">
			<fileset file="${webroot.dir}/border-template.htm" />
			<filterset begintoken="%!" endtoken="!%">
				<filter token="All4BizBuildNumber" value="${version.label}" />
			</filterset>
		</copy>
	</target>
				
	<target name="clean">
		<delete dir="${output.dir}" failonerror="false"></delete>
		<delete dir="${build.dir}"  failonerror="false"></delete>
		<delete dir="${dist.dir}"  failonerror="false"></delete>
	</target>

	<target name="build" depends="clean">
		<mkdir dir="${build.dir}/classes" />
		<javac target="1.5" srcdir="${src.dir}" destdir="${build.dir}/classes" debug="on">
			<classpath refid="classpath.src" />
		</javac>
		<mkdir dir="${project.working.dir}" />
		<copy todir="${project.working.dir}">
			<fileset dir="${webroot.dir}" >
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/classes">
			<fileset dir="${src.dir}" >
				<include name="**/*"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<copy todir="${project.working.dir}/WEB-INF/classes">
			<fileset dir="${build.dir}/classes">
			</fileset>
		</copy>
		
	</target>
	
	<target name="makeWar" depends="build-new-version" description="Makes a WAR file for the project. This will not have Test classes etc. War file out of this target is suitable for Production release.">
		<mkdir dir="${dist.dir}"/>
		<jar destfile="${dist.dir}/${module.name}.war">
			<zipfileset dir="${project.working.dir}">
				<include name="**/*" />
				<exclude name="**/*.war" />
				<exclude name="**/*formcenterMap.map.xml" />
			</zipfileset>
		</jar>
	</target>
	
	<target name="build-new-version" depends="build,increment-build-number,set-build-type-BLANK,update-version-label" />

	<target name="set-build-type-INSTR">
		<property name="build.type" value="INSTR" />
	</target>

	<target name="set-build-type-BLANK">
		<property name="build.type" value="" />
	</target>
	
	<target name="deploy" depends="makeWar">
		<delete file="${server.deploy.dir}/${module.name}.war" failonerror="false" />
		<delete dir="${server.deploy.dir}/${module.name}" failonerror="true" />
		<!-- copy file="${dist.dir}/${module.name}.war" todir="${server.deploy.dir}" / -->
		<waitfor maxwait="5" maxwaitunit="second">
			<http url="http://localhost/index.html"/>
		</waitfor>
		<unzip dest="${server.deploy.dir}/${module.name}" src="${dist.dir}/${module.name}.war" overwrite="yes"/>
		<echo file="${server.deploy.dir}/${module.name}/WEB-INF/REDEPLOY">updated WEB-INF/REDEPLOY</echo>
	</target>
	
	
	<!-- Test build related targets -->
	<target name="test-build" depends="build" description="creates instrumented build for code coverage and selenium tests">
		<mkdir dir="${build.test.dir}/classes" />
		<javac target="1.5" srcdir="${functional.test.src.dir}:${junit.test.src.dir}" destdir="${build.test.dir}/classes" debug="on">
			<classpath refid="classpath.test" />
			<classpath refid="classpath.src" />
		</javac>
		<mkdir dir="${project.working.test.dir}" />
		<copy todir="${project.working.test.dir}">
			<fileset dir="${webroot.dir}" >
				<include name="**/*"/>
			</fileset>
		</copy>
		<copy todir="${build.test.dir}/classes">
			<fileset dir="${src.dir}" >
				<include name="**/*"/>
				<exclude name="**/*.java"/>
				<exclude name="**/formcenterMap.map.xml"/>
			</fileset>
			<fileset dir="${functional.test.src.dir}" >
				<include name="**/*"/>
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="${junit.test.src.dir}" >
				<include name="**/*"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<copy todir="${project.working.test.dir}/WEB-INF/classes">
			<fileset dir="${build.test.dir}/classes" />
		</copy>
	</target>
	
	<target name="test-build-new-version" depends="build-new-version,test-build,set-build-type-INSTR,test-update-version-label" />
	
	<target name="clean-emma-classes-dir">
		<mkdir dir="${emma.classes.for.instr.dir}"/>
		<copydir src="${build.dir}/classes/" dest="${emma.classes.for.instr.dir}/"></copydir>
	</target>
	
	<target name="test-run-junits" depends="test-build-new-version,emma,clean-emma-classes-dir">
		<mkdir dir="${output.reports.junit.dir}"/>
		
		<!-- ======================================================================= -->
		<!-- EMMA INSTRUMENTATION -->
		<!-- ======================================================================= -->
		<!-- Instrument the classes, this takes the normal classes, and makes instrumented classes instead -->
		<!-- Note that EMMA takes regular ANT path elements as instrumentation input, which is exceedingly convenient -->
		<emma enabled="${emma.enabled}" >
		    <instr instrpathref="emma.instr.coverage.classes"
		         destdir="${output.reports.codecoverage.instr.dir}"
		         metadatafile="${output.reports.codecoverage.dir}/metadata.emma"
		         merge="true">
		        <filter value="${emma.filter}" />
		    </instr>
		</emma>
		<property name="classpath-for-console-emma" refid="emma.classpath.src"/>
		<property name="classpath-for-console-src" refid="classpath.src"/>
		<echo message="Junit classpath - emma.classpath.src ${classpath-for-console-emma}"></echo>
		<echo message="Junit classpath - classpath.scr ${classpath-for-console-src}"></echo>
		<junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="yes" showoutput="yes">
			
			<!-- only used for emma -->
			<jvmarg value="-Demma.coverage.out.file=${output.reports.codecoverage.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
					
			<!-- non emma classpath for pure junit tests -->
			<!-- classpath>
				<path refid="classpath.test" />
			</classpath -->
			
			<classpath>
				<path refid="emma.classpath.src" />
				<path refid="classpath.src" />
				<path refid="emma.lib" />
			</classpath>
			
			<formatter type="xml" />
			
			<batchtest fork="yes" todir="${output.reports.junit.dir}">
				<fileset dir="${junit.test.src.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/Abstract*" />
				</fileset>
			</batchtest>
		</junit>
		<antcall target="emma-create-report"></antcall>
	</target>
	
	<!-- this loads <emma> and <emmajava> custom tasks: -->
	
	<target name="emma-create-report">
	<!-- if enabled, generate coverage report(s): -->
		<emma enabled="${emma.enabled}" >
			    <!-- <ctl connect="localhost:47653" >
			        <command name="coverage.get" args="${output.reports.codecoverage.dir}/coverage.emma" />
			        <command name="coverage.reset" />
			    </ctl> -->

		    <report sourcepath="src"
		          sort="+block,+name,+method,+class"
		          metrics="method:70,block:80,line:80,class:100">
		    <!-- collect all EMMA data dumps (metadata and runtime)
		         [this can be done via nested <fileset> fileset elements
		         or <file> elements pointing to a single file]:
		    -->
		    <fileset dir="${output.reports.codecoverage.dir}" >
		        <include name="*.emma" />
		    </fileset>
		    
		    <!-- for every type of report desired, configure a nested
		         element; various report parameters
		         can be inherited from the parent <report>
		         and individually overridden for each report type:
		    -->
		    <txt outfile="${output.reports.codecoverage.dir}/coverage.txt"
		        depth="package"
		        columns="class,method,block,line,name"/>
		    <xml outfile="${output.reports.codecoverage.dir}/coverage.xml"
		        depth="package"/>
		    <html outfile="${output.reports.codecoverage.dir}/coverage.html"
		        depth="method"
		        columns="name,class,method,block,line"/>
		    </report>
		</emma>
	</target>
	
	
	<target name="test-makeWar" depends="makeWar,test-build-new-version" description="Makes a WAR file for Testing. Contains classes for code coverage, functional tests and junits">
		<mkdir dir="${dist.test.dir}"/>
		<jar destfile="${dist.test.dir}/${module.name}.war">
			<zipfileset dir="${project.working.test.dir}">
				<include name="**/*" />
				<exclude name="**/*.war" />
				<exclude name="**/*formcenterMap.map.xml" />
			</zipfileset>
		</jar>
	</target>
	
	<target name="test-deploy" depends="test-makeWar,emma,clean-emma-classes-dir">
			<!-- copy file="${dist.test.dir}/${module.name}.war" overwrite="true" todir="${server.deploy.test.dir}" / -->
			<delete file="${server.deploy.dir}/${module.name}.war" failonerror="false" />
			<delete dir="${server.deploy.dir}/${module.name}" failonerror="true" />
			<waitfor maxwait="5" maxwaitunit="second">
				<http url="http://localhost/index.html"/>
			</waitfor>
			<unzip dest="${server.deploy.dir}/${module.name}" src="${dist.test.dir}/${module.name}.war" overwrite="yes"/>
			
	</target>

	
	<path id="emma.instr.coverage.classes" >
	    <pathelement location="${emma.classes.for.instr.dir}/" />
	</path>

	<target name="emma" description="turns on EMMA's instrumentation/reporting">
		<property name="emma.enabled" value="true" />
	    <!-- EMMA instr class output directory (it is important to create this property only when EMMA is enabled) -->
	    <mkdir dir="${output.reports.codecoverage.instr.dir}" />
		 <!-- this property, if overriden via -Demma.filter=<list of filter specs>
		     on ANT's command line, will set the coverage filter; by default,
		     all classes found in 'emma.coverage.classes' pathref will be instrumented:
		    -->
		<property name="emma.filter" value="-com.telstra.all4biz.control.*,-com.telstra.all4biz.entity.auto.*,-com.telstra.all4biz.page.*" />
		<!-- <property name="emma.filter" value="-com.telstra.all4biz.control.*,-com.telstra.all4biz.entity.auto.*" /> -->
	</target>

	<!-- target name="acceptance-test" depends="deploy,test-run-junits" -->
	<target name="acceptance-test" depends="test-run-junits,deploy">
			<echo>Running acceptance tests.</echo>
			<mkdir dir="${output.reports.dir}" />
			<mkdir dir="${output.reports.codecoverage.instr.dir}" />
			<mkdir dir="${output.reports.functional.dir}" />
			<echo>waiting for ${wait-after-deployment} sec before acceptance tests... We need latest deployment to be ACTIVE before tests start.</echo>
			<waitfor maxwait="${wait-after-deployment}" maxwaitunit="second">
				<http url="http://localhost/index.html"/>
			</waitfor>
	
			<property name="classpath-for-console-test" refid="classpath.test"/>
			<echo message="Acceptance-test classpath - classpath.test ${classpath-for-console-test}"></echo>
			<junit fork="yes" forkmode="once" printsummary="yes" haltonfailure="yes" showoutput="yes">
				<jvmarg value="-Dconcordion.output.dir=${output.reports.functional.dir}" />

				<!--non emma classpath 
				<classpath>
					<path refid="classpath.src" />
				</classpath -->
				<classpath>
					<path refid="classpath.test" />
				</classpath>
				
				<formatter type="xml" />
				<batchtest todir="${output.reports.functional.dir}">
					<fileset dir="${functional.test.src.dir}">
						<include name="**/*Test.java" />
						<exclude name="**/Abstract*" />
					</fileset>
				</batchtest>
			</junit>
			
		</target>

	<target name="Build-And-TestAll" description="Start Selenium server ; Run Tests ; stop Selenium server">
        <parallel>
            <antcall target="start-selenium-server"></antcall>
            <sequential>
                <echo taskname="waitfor" message="Wait for proxy server launch" />
                <waitfor maxwait="2" maxwaitunit="minute" checkevery="100">
                    <http url="http://localhost:${selenium-server.port}/selenium-server/driver/?cmd=testComplete"/>
                </waitfor>
            		<echo>Selenium server should be running now...</echo>
                    <antcall target="acceptance-test"></antcall>
                    <antcall target="stop-selenium-server"></antcall>
            </sequential>
        </parallel>

	</target>
	
	<target name="start-selenium-server" description="Just starts the Selenium server.">
		<java jar="${lib.selenium.server.jar}" fork="true" spawn="true">
			<arg line="-timeout 30"/>
			<arg line="-port ${selenium-server.port}"/>
		</java>
		<echo>Started the selenium server on port ${selenium-server.port}</echo>
	</target>
	
	
	<target name="stop-selenium-server" description="Stops the Selenium server.">
	    <get taskname="selenium-shutdown" src="http://localhost:${selenium-server.port}/selenium-server/driver/?cmd=shutDownSeleniumServer"
	        dest="result.txt" ignoreerrors="true" />
	    <echo taskname="selenium-shutdown" message="Shutting down selenium server. DGF Errors during shutdown are expected" />
	</target>
	
<!--	
	<target name="build-db" description="build the All4Biz database">
		<cdbgen map="${src.dir}/All4BizMap.map.xml" 
		    adapter="org.apache.cayenne.dba.sqlserver.SQLServerAdapter"
		    driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" 
		    url="jdbc:sqlserver://localhost:1433;databaseName=all4biz_test;SelectMethod=cursor" 
		    username="all4biz"
			password="Avoka!23"/>
		</target>
	
	<typedef resource="org/apache/cayenne/tools/antlib.xml"> 
	   <classpath refid="classpath"/> 
	</typedef>
-->

	<target name="a-hotdeploy-resources">
		<!-- override defaults with customized assets -->
		<copy todir="${server.deploy.dir}/${module.name}" overwrite="false">
			<fileset dir="WebRoot">
				<include name="**/*.htm"/>
				<include name="**/menu.xml"/>
				<include name="**/click.xml"/>
				<include name="**/velocity.properties"/>
				<include name="**/spring.xml"/>
				<include name="**/*.vm"/>
				<include name="**/*.css"/>
				<include name="**/*.js"/>
				<include name="**/*.gif"/>
				<include name="**/*.jpg"/>
				<include name="**/*.jpeg"/>
				<include name="**/*.png"/>
				<include name="**/*.pdf"/>
				<include name="**/*.ico"/>
			</fileset>
		</copy>
	</target>

</project>